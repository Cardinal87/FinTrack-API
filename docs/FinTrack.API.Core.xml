<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FinTrack.API.Core</name>
    </assembly>
    <members>
        <member name="T:FinTrack.API.Core.Common.DomainException">
            <summary>
            Represents base class for domain layer exceptions
            </summary>
        </member>
        <member name="T:FinTrack.API.Core.Common.Entity">
            <summary>
            presents abstract class of Entity
            </summary>
        </member>
        <member name="T:FinTrack.API.Core.Common.UserRoles">
            <summary>
            Static class with user role constants
            </summary>
        </member>
        <member name="F:FinTrack.API.Core.Common.UserRoles.AllRoles">
            <summary>
            Read-only collection with all possible user roles
            </summary>
        </member>
        <member name="T:FinTrack.API.Core.Entities.Account">
            <summary>
            presents User's account
            </summary>
        </member>
        <member name="M:FinTrack.API.Core.Entities.Account.Debit(System.Decimal)">
            <summary>
            debit money from balance
            </summary>
            <param name="amount">amount that will be debited</param>
            <exception cref="T:FinTrack.API.Core.Exceptions.InsufficientFundsException">amount param is greater than balance</exception>
            <exception cref="T:FinTrack.API.Core.Exceptions.IncorrectAmountException">amount if negative or equal to zero</exception>
        </member>
        <member name="M:FinTrack.API.Core.Entities.Account.TopUp(System.Decimal)">
            <summary>
            top up the balance
            </summary>
            <param name="amount">amount that will be credited to the balance</param>
            <exception cref="T:FinTrack.API.Core.Exceptions.IncorrectAmountException">amount if negative or equal to zero</exception>
        </member>
        <member name="M:FinTrack.API.Core.Entities.Account.AddOutgoingTransaction(FinTrack.API.Core.Entities.Transaction)">
            <summary>
            Add transaction to list of outgoing transactions
            </summary>
            <param name="transaction">
            <see cref="T:FinTrack.API.Core.Entities.Transaction"/> entity
            </param>
            <exception cref="T:FinTrack.API.Core.Exceptions.TransactionOwnershipException">
            Transaction source account id and this account id does not match
            </exception>
        </member>
        <member name="M:FinTrack.API.Core.Entities.Account.AddIncomingTransaction(FinTrack.API.Core.Entities.Transaction)">
            <summary>
            Add transaction to list of incoming transactions
            </summary>
            <param name="transaction">
            <see cref="T:FinTrack.API.Core.Entities.Transaction"/> entity
            </param>
            <exception cref="T:FinTrack.API.Core.Exceptions.TransactionOwnershipException">
            Transaction destination account id and this account id does not match
            </exception>
        </member>
        <member name="T:FinTrack.API.Core.Entities.Transaction">
            <summary>
            Represents peer-to-peer financial transaction between two accounts.
            </summary>
            <remarks>
            Responsibilities:
            <list type="bullet">
            <item>Stores all transaction info</item>
            </list>
            transaction must be immutable
            </remarks>
        </member>
        <member name="M:FinTrack.API.Core.Entities.Transaction.#ctor(System.Decimal,System.Guid,System.Guid,System.DateTime)">
            <summary>
            Creates immutable transaction
            </summary>
            <param name="amount">amount of the transaction</param>
            <param name="fromAccountId">source account id</param>
            <param name="toAccountId">destination account id</param>
            <param name="date">date of the transaction</param>
            <exception cref="T:FinTrack.API.Core.Exceptions.InvalidTransactionException">
            Thrown when:
            <list type="bullet">
            <item><paramref name="date"/> is later than <see cref="P:System.DateTime.UtcNow"/></item>
            <item><paramref name="fromAccountId"/>is equal to <paramref name="toAccountId"/></item>
            </list>
            </exception>
            <exception cref="T:FinTrack.API.Core.Exceptions.IncorrectAmountException">
            Thrown when:
            <list type="bullet">
            <item><paramref name="amount"/>is negative or zero</item>
            </list>
            </exception> 
        </member>
        <member name="P:FinTrack.API.Core.Entities.Transaction.Amount">
            <summary>
            Amount of the transaction
            </summary>
            <remarks>
            Must be positive and must not be equal to zero 
            </remarks>
        </member>
        <member name="P:FinTrack.API.Core.Entities.Transaction.FromAccountId">
            <summary>
            Source account ID
            </summary>
        </member>
        <member name="P:FinTrack.API.Core.Entities.Transaction.ToAccountId">
            <summary>
            Destination account ID
            </summary>
        </member>
        <member name="P:FinTrack.API.Core.Entities.Transaction.Date">
            <summary>
            Transaction timestamp in UTC
            </summary>
            <remarks>
            Must be less or equal to <see cref="P:System.DateTime.UtcNow"/>
            </remarks>
        </member>
        <member name="T:FinTrack.API.Core.Entities.User">
            <summary>
            Represents a registered user in the financial tracking system.
            </summary>
            <remarks>
            Responsibilities:
            <list type="bullet">
            <item>Authentication and identity in the system</item>
            <item>Personal information storage</item>
            <item>Ownership of the financial accounts</item>
            </list>
            </remarks>
        </member>
        <member name="P:FinTrack.API.Core.Entities.User.Accounts">
            <summary>
            Read-only collection with user's accounts
            </summary>
        </member>
        <member name="P:FinTrack.API.Core.Entities.User.Roles">
            <summary>
            Read-only collection with user's roles
            </summary>
        </member>
        <member name="P:FinTrack.API.Core.Entities.User.Name">
            <summary>
            User's name
            </summary>
            <remarks>
            Rules:
            <list type="bullet">
            <item>Must be non-empty and not whitespaces only</item>
            <item>
            Must be unique across the system
            (The uniqueness is provided by the database indexes)
            </item>
            <item>Must non-greater than 100 characters</item>
            </list>
            
            Exceptions:
            <list type="bullet">
            <item><see cref="T:System.ArgumentException"/> - Incorrect name format</item>
            
            </list>
            </remarks>
        </member>
        <member name="P:FinTrack.API.Core.Entities.User.Email">
            <summary>
            User's email address
            </summary>
            <remarks>
            Rules:
            <list type="bullet">
            <item>Must follow RFC 5322</item>
            <item>
            Must be unique across the system
            (The uniqueness is provided by the database indexes)
            </item>
            </list>
            
            Exceptions:
            <list type="bullet">
            <item><see cref="T:System.ArgumentException"/> - Incorrect email format</item>
            
            </list>
            </remarks>
        </member>
        <member name="P:FinTrack.API.Core.Entities.User.Phone">
            <summary>
            User's phone
            </summary>
            <remarks>
            Rules:
            <list type="bullet">
            <item>Must follow E.164</item>
            <item>
            Must be unique across the system
            (The uniqueness is provided by the database indexes)
            </item>
            </list>
            
            Exceptions:
            <list type="bullet">
            <item><see cref="T:System.ArgumentException"/> - Incorrect phone format</item>
            
            </list>
            </remarks>
        </member>
        <member name="P:FinTrack.API.Core.Entities.User.PasswordHash">
            <summary>
            User's password hash
            </summary>
            <remarks>
            Rules:
            <list type="bullet">
            <item>Must be result of cryptographic function</item>
            <item>
            Must follow next format:
            {Hash algorithm}.{Iteration count}.{Salt in Base64}.{Hash in Base64}
            </item>
            </list>
            
            Exceptions:
            <list type="bullet">
            <item><see cref="T:System.ArgumentException"/> - Incorrect hash format</item>
            
            </list>
            </remarks>
        </member>
        <member name="M:FinTrack.API.Core.Entities.User.AddAccount(FinTrack.API.Core.Entities.Account)">
            <summary>
            Attaches user's account to account collection
            </summary>
            <param name="account">
            account of the current user
            </param>
            
            <exception cref="T:System.ArgumentException">
            Account's reference to user and current user's id does not match
            </exception>
        </member>
        <member name="M:FinTrack.API.Core.Entities.User.DeleteAccount(System.Guid)">
            <summary>
            Deattaches user's account from collection
            </summary>
            <param name="accountId">
            Id of the attached account
            </param>
            
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Account with such id does not exist in user's collection
            </exception>
        </member>
        <member name="M:FinTrack.API.Core.Entities.User.AssignRole(System.String)">
            <summary>
            Assings a new role to user
            </summary>
            <param name="role">one of the string constants of <see cref="T:FinTrack.API.Core.Common.UserRoles"/></param>
            <exception cref="T:FinTrack.API.Core.Common.DomainException">role not defined in <see cref="T:FinTrack.API.Core.Common.UserRoles"/></exception>
        </member>
        <member name="T:FinTrack.API.Core.Exceptions.AccountOwnershipException">
            <summary>
            Exception for attempt to assign an incorrect account to user
            </summary>
            <remarks>
            Cases
            <list type="bullet">
            <item>Account.UserId != User.Id</item>
            </list>
            </remarks>
        </member>
        <member name="P:FinTrack.API.Core.Exceptions.AccountOwnershipException.UserId">
            <summary>
            Id of the destination user
            </summary>
        </member>
        <member name="P:FinTrack.API.Core.Exceptions.AccountOwnershipException.AccountRefId">
            <summary>
            Id by which the account refers to the user
            </summary>
        </member>
        <member name="T:FinTrack.API.Core.Exceptions.EntityNotFoundException">
            <summary>
            Exception for showing that entity cannot be find
            </summary>
            <remarks>
            Must be thrown when entity cannot be find by
            id or by amother key
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:FinTrack.API.Core.Exceptions.IncorrectAmountException" -->
        <member name="P:FinTrack.API.Core.Exceptions.IncorrectAmountException.Amount">
            <summary>
            Invalid amount
            </summary>
        </member>
        <member name="M:FinTrack.API.Core.Exceptions.IncorrectAmountException.#ctor(System.Decimal,System.String)">
            <summary>
            </summary>
            <param name="amount">invalid amount</param>
            <param name="message">exception message</param>
        </member>
        <member name="T:FinTrack.API.Core.Exceptions.InsufficientFundsException">
            <summary>
            Exception for debiting funds
            </summary>
            <remarks>
            Must be thrown when debit amount is greater than current balance
            </remarks>
        </member>
        <member name="P:FinTrack.API.Core.Exceptions.InsufficientFundsException.CurrentBalance">
            <summary>
            Current balance of the account
            </summary>
        </member>
        <member name="P:FinTrack.API.Core.Exceptions.InsufficientFundsException.RequiredAmount">
            <summary>
            Required debit amount
            </summary>
        </member>
        <member name="M:FinTrack.API.Core.Exceptions.InsufficientFundsException.#ctor(System.Decimal,System.Decimal)">
            <summary>
            </summary>
            <param name="balance">balance of the account</param>
            <param name="required">required debit amount</param>
        </member>
        <member name="T:FinTrack.API.Core.Exceptions.InvalidTransactionException">
            <summary>
            Exception for transactions
            </summary>
            <remarks>
            Must be thrown in case of incorrect transaction creating
            with indicating the reason
            <para>
            Cases:
            <list type="bullet">
            <item>date of transaction is greater than <see cref="P:System.DateTime.UtcNow"/></item>
            <item>Trasaction.FromAccountId == Transaction.ToAccountId</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:FinTrack.API.Core.Exceptions.InvalidTransactionException.Reason">
            <summary>
            Short description of the reason of the exception
            </summary>
        </member>
        <member name="M:FinTrack.API.Core.Exceptions.InvalidTransactionException.#ctor(System.String)">
            <summary>
            </summary>
            <param name="reason">reason of the exception</param>
        </member>
        <member name="T:FinTrack.API.Core.Exceptions.TransactionOwnershipException">
            <summary>
            Exception for attempt to assign an incorrect transaction
            </summary>
            <remarks>
            Cases:
            <list type="bullet">
            <item>Outgoing: Transaction.FromAccountId != Account.Id</item>
            <item>Incoming: Transaction.ToAccountId != Account.Id</item>
            </list>
            </remarks>
        </member>
        <member name="P:FinTrack.API.Core.Exceptions.TransactionOwnershipException.AccountId">
            <summary>
            Id of destination account
            </summary>
        </member>
        <member name="P:FinTrack.API.Core.Exceptions.TransactionOwnershipException.TransactionRefId">
            <summary>
            Transaction's reference by id to destination or source account
            </summary>
        </member>
        <member name="M:FinTrack.API.Core.Interfaces.IAccountRepository.Add(FinTrack.API.Core.Entities.Account)">
            <summary>
            Begins tracking the given entity as "Added"
            </summary>
            <param name="account">the entity to track </param>
        </member>
        <member name="M:FinTrack.API.Core.Interfaces.IAccountRepository.UpdateAsync(FinTrack.API.Core.Entities.Account)">
            <summary>
            Begins tracking the given entity as "Updated"
            </summary>
            <param name="account">the entity to update</param>
            <exception cref="T:FinTrack.API.Core.Exceptions.EntityNotFoundException">the given entity does not exist</exception>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:FinTrack.API.Core.Interfaces.IAccountRepository.DeleteAsync(System.Guid)">
            <summary>
            Begins tracking the given entity as "Deleted"
            </summary>
            <param name="id">id of the entity to delete</param>
            <exception cref="T:FinTrack.API.Core.Exceptions.EntityNotFoundException">the given entity does not exist</exception>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:FinTrack.API.Core.Interfaces.IAccountRepository.GetAllAsync">
            <summary>
            Returns all entities asynchronously
            </summary>
            <returns>
                <see cref="T:System.Threading.Tasks.Task"/>.
                The task result contains a <see cref="T:System.Collections.Generic.IEnumerable`1"/> with <see cref="T:FinTrack.API.Core.Entities.Transaction"/> entities
            </returns>
        </member>
        <member name="M:FinTrack.API.Core.Interfaces.IAccountRepository.GetAccountIdsByUserIdAsync(System.Guid)">
            <summary>
            Returns ids of all user accounts
            </summary>
            <param name="id">User id</param>
            <returns>
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> contains <see cref="T:System.Guid"/>
            </returns>
        </member>
        <member name="M:FinTrack.API.Core.Interfaces.IAccountRepository.GetByIdAsync(System.Guid)">
            <summary>
            Returns entity with given id asynchronously
            </summary>
            <param name="id">id of entity</param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task"/>.
                The task result contains a <see cref="T:FinTrack.API.Core.Entities.Account"/> with given <paramref name="id"/> or <see langword="null"/> if entity does not exist 
            </returns>
        </member>
        <member name="M:FinTrack.API.Core.Interfaces.IAccountRepository.SaveChangesAsync">
            <summary>
            Asynchronously save all changes maked in repository
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:FinTrack.API.Core.Interfaces.IPasswordHasher.GetHash(System.String)">
            <summary>
            Creates a password hash
            </summary>
            <param name="password">clear password</param>
            <returns>
            Formatted string containing hash parameters.
            Fotmat: {Hash algorithm}.{Iteration count}.{Salt in Base64}.{Hash in Base64}
            </returns>
        </member>
        <member name="M:FinTrack.API.Core.Interfaces.IPasswordHasher.VerifyPassword(System.String,System.String)">
            <summary>
            Checks if a password matches the hash
            </summary>
            <param name="hashedPassword">result of the <see cref="M:FinTrack.API.Core.Interfaces.IPasswordHasher.GetHash(System.String)"/> method</param>
            <param name="password">password that would be checked</param>
            <returns>
            <see langword="true"/> if the password matches the hash.
            <see langword="false"/> if password does not match the hash
            </returns>
        </member>
        <member name="M:FinTrack.API.Core.Interfaces.ITransactionRepository.Add(FinTrack.API.Core.Entities.Transaction)">
            <summary>
            Begins tracking the given entity as "Added"
            </summary>
            <param name="transaction">the entity to track </param>
        </member>
        <member name="M:FinTrack.API.Core.Interfaces.ITransactionRepository.GetAllAsync">
            <summary>
            Returns all entities asynchronously
            </summary>
            <returns>
                <see cref="T:System.Threading.Tasks.Task"/>.
                The task result contains a <see cref="T:System.Collections.Generic.IEnumerable`1"/> with <see cref="T:FinTrack.API.Core.Entities.Transaction"/> entities
            </returns>
        </member>
        <member name="M:FinTrack.API.Core.Interfaces.ITransactionRepository.GetByIdAsync(System.Guid)">
            <summary>
            Returns entity with given id asynchronously
            </summary>
            <param name="id">id of entity</param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task"/>.
                The task result contains a <see cref="T:FinTrack.API.Core.Entities.Transaction"/> with given <paramref name="id"/> or <see langword="null"/> if entity does not exist 
            </returns>
        </member>
        <member name="M:FinTrack.API.Core.Interfaces.ITransactionRepository.GetByDateAsync(System.DateOnly)">
            <summary>
            Returns the <see cref="T:FinTrack.API.Core.Entities.Transaction"/> with given <see cref="T:System.DateOnly"/>
            </summary>
            <param name="date">date of the transaction</param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task"/>.
                 The task result contains a <see cref="T:System.Collections.Generic.IEnumerable`1"/> with <see cref="T:FinTrack.API.Core.Entities.Transaction"/> entities
            </returns>
        </member>
        <member name="M:FinTrack.API.Core.Interfaces.ITransactionRepository.GetByDateAsync(System.DateOnly,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Returns the <see cref="T:FinTrack.API.Core.Entities.Transaction"/>s with given <paramref name="date"/>
            and if <paramref name="accountIds"/> contains <see cref="P:FinTrack.API.Core.Entities.Transaction.FromAccountId"/> or
            <see cref="P:FinTrack.API.Core.Entities.Transaction.ToAccountId"/>
            </summary>
            <param name="date">date of the transaction</param>
            <param name="accountIds">id of accounts involved in the transaction</param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task"/>.
                 The task result contains a <see cref="T:System.Collections.Generic.IEnumerable`1"/> with <see cref="T:FinTrack.API.Core.Entities.Transaction"/> entities
            </returns>
        </member>
        <member name="M:FinTrack.API.Core.Interfaces.ITransactionRepository.GetFromToDateAsync(System.DateTime,System.DateTime)">
            <summary>
            Returns all entities between <paramref name="fromDate"/> and <paramref name="toDate"/> inclusive
            </summary>
            <param name="fromDate">start of the range</param>
            <param name="toDate">end of the range</param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task"/>.
                The task result contains a <see cref="T:System.Collections.Generic.IEnumerable`1"/> with <see cref="T:FinTrack.API.Core.Entities.Transaction"/> entities
            </returns>
        </member>
        <member name="M:FinTrack.API.Core.Interfaces.ITransactionRepository.GetFromToDateAsync(System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Returns all <see cref="T:FinTrack.API.Core.Entities.Transaction"/>s between <paramref name="fromDate"/> and <paramref name="toDate"/> inclusive 
            and the <see cref="P:FinTrack.API.Core.Entities.Transaction.FromAccountId"/> or <see cref="P:FinTrack.API.Core.Entities.Transaction.ToAccountId"/> of which is contained in <paramref name="accountIds"/>
            </summary>
            <param name="fromDate">start of the range</param>
            <param name="toDate">end of the range</param>
            <param name="accountIds">id of accounts involved in the transaction</param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task"/>.
                The task result contains a <see cref="T:System.Collections.Generic.IEnumerable`1"/> with <see cref="T:FinTrack.API.Core.Entities.Transaction"/> entities
            </returns>
        </member>
        <member name="M:FinTrack.API.Core.Interfaces.ITransactionRepository.SaveChangesAsync">
            <summary>
            Asynchronously save all changes maked in repository
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:FinTrack.API.Core.Interfaces.IUserRepository.Add(FinTrack.API.Core.Entities.User)">
            <summary>
            Begins tracking the given entity as "Added"
            </summary>
            <param name="user">the entity to track </param>
        </member>
        <member name="M:FinTrack.API.Core.Interfaces.IUserRepository.UpdateAsync(FinTrack.API.Core.Entities.User)">
            <summary>
            Begins tracking the given entity as "Updated"
            </summary>
            <param name="user">the entity to update</param>
            <exception cref="T:FinTrack.API.Core.Exceptions.EntityNotFoundException">the given entity does not exist</exception>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:FinTrack.API.Core.Interfaces.IUserRepository.DeleteAsync(System.Guid)">
            <summary>
            Begins tracking the given entity as "Deleted"
            </summary>
            <param name="id">id of the entity to delete</param>
            <exception cref="T:FinTrack.API.Core.Exceptions.EntityNotFoundException">the given entity does not exist</exception>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:FinTrack.API.Core.Interfaces.IUserRepository.GetAllAsync">
            <summary>
            Returns all entities asynchronously
            </summary>
            <returns>
                <see cref="T:System.Threading.Tasks.Task"/>.
                The task result contains a <see cref="T:System.Collections.Generic.IEnumerable`1"/> with <see cref="T:FinTrack.API.Core.Entities.User"/> entities
            </returns>
        </member>
        <member name="M:FinTrack.API.Core.Interfaces.IUserRepository.GetByIdAsync(System.Guid)">
            <summary>
            Returns entity with given id asynchronously
            </summary>
            <param name="id">id of entity</param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task"/>.
                The task result contains a <see cref="T:FinTrack.API.Core.Entities.User"/> with given <paramref name="id"/> or <see langword="null"/> if entity does not exist 
            </returns>
        </member>
        <member name="M:FinTrack.API.Core.Interfaces.IUserRepository.GetByEmailAsync(System.String)">
            <summary>
            Returns entity with given email asynchronously
            </summary>
            <param name="email">email of the entity</param>
            <returns>
                <see cref="T:System.Threading.Tasks.Task"/>.
                The task result contains a <see cref="T:FinTrack.API.Core.Entities.User"/> with given <paramref name="id"/> or <see langword="null"/> if 
                entity with given email does not exist 
            </returns>
        </member>
        <member name="M:FinTrack.API.Core.Interfaces.IUserRepository.SaveChangesAsync">
            <summary>
            Asynchronously save all changes maked in repository
            </summary>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="T:FinTrack.API.Core.Services.TransferService">
            <summary>
            Service for handling transactions
            </summary>
        </member>
        <member name="M:FinTrack.API.Core.Services.TransferService.HandleTransactionAsync(System.Decimal,System.Guid,System.Guid)">
            <summary>
            Handles transaction between accounts
            </summary>
            <param name="amount">amount of the transaction</param>
            <param name="toAccountId">id of the destination account</param>
            <param name="fromAccountId">id of the source account</param>
            <returns></returns>
            <exception cref="T:FinTrack.API.Core.Exceptions.EntityNotFoundException">
            Source or destination accounts does not exists
            </exception>
            <exception cref="T:FinTrack.API.Core.Exceptions.InsufficientFundsException">
            Amount of the transaction is greater than the source account balance
            </exception>
            <exception cref="T:FinTrack.API.Core.Exceptions.IncorrectAmountException">
            Amount of the transaction is negative or equal to zero
            </exception>
        </member>
    </members>
</doc>
